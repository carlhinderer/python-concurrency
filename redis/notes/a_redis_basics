-----------------------------------------------------------------------------
| A - REDIS BASICS                                                          |
-----------------------------------------------------------------------------

- Redis

    - 'Remote Dictionary Server' is an in-memory data structure store, used as a distributed,
        in-memory key-value database, cache, and message broker, with optional durability.

    - Values can be data structures strings, lists, maps, sets, sorted sets, HyperLogLogs, bitmaps,
        streams, and spatial indexes.  Note that keys are always strings.

    - Created by Salvatore Sanfillippo, originally released in 2009.

    - Typical use cases are session caching, full-page cache, message queue applications,
        leaderboards, and counting.

    - Redis is the world's most popular key/value database.



- Redis Data Types

    - Primary supported data types:

        - strings
        - lists of strings
        - sets of strings
        - sorted sets of strings (collections of non-repeating elements ordered by score)
        - hash tables where keys and values are strings
        - HyperLogLogs used for approximated set cardinality size estimation
        - stream of entries with consumer groups, allows you to store multiple fields and string values
        - geospatial data through the implementation of the geohash technique


    - More types supported by Redis modules:

        - JSON using 'RedisJSON'
        - queryable property graphs using 'RedisGraph'
        - time series data with 'RedisTimeSeries'
        - bloom and other filters with 'RedisBloom'



- Persistence

    - Redis typically holds the whole dataset in memory.  Persistence can be achieved either by 
        snapshotting or journaling (recommended).

    - In the case of journaling, Redis can rewrite the append-only file in the background to avoid
        indefinite growth of the journal.

    - By default, Redis writes data to a file system at least every 2 seconds, but this is 
        configurable.



- Replication

    - Redis support master-replica replication.  Data from a Redis server can replicate to any
        number of replicas.  A replica may be a master to another replica, which allows Redis to 
        implement a single-rooted replication tree.

    - Redis replicas can be configured to accept writes, permitting intentional and unintentional
        inconsistency between instances.



- Running Redis on Docker

    - Start a redis instance:

        $ docker run --name my-redis 
                     -d
                     -p 6379:6379
                     redis


    - Start an instance with persistent storage:

        $ docker run --name my-redis 
                     -d
                     -p 6379:6379
                     -v redis_persistence:/data
                     redis
                     redis-server --save 60 1 --loglevel warning

      There are several different persistence strategies to choose from. This one will save a snapshot 
        of the DB every 60 seconds if at least 1 write operation was performed (it will also lead to 
        more logs, so the loglevel option may be desirable). 


    - To connect via the redis-cli:

        $ docker container exec -i -t my-redis redis-cli


    - The 'redis.conf' file is used to configure redis.  We can stick with the defaults for now in
        local testing, but in production we'd want to fine tune it.

        # /etc/redis/6379.conf
        --------------------------------
        port              6379
        daemonize         yes
        save              60 1
        bind              127.0.0.1
        tcp-keepalive     300
        dbfilename        dump.rdb
        dir               ./
        rdbcompression    yes



- Getting Started with Redis

    - Redis has a request-response model.  You connect to the server over TCP port 6379, request
        some action, and the server sends you back a response.  Each client does a (typically blocking)
        read on a socket waiting for the server response.


    - To ping the server from redis-cli:

        # Ping server
        127.0.0.1:6379> PING
        PONG


        # Get information about current user and db
        127.0.0.1:6379> CLIENT INFO


    - To use the dictionary service, we use the 'SET' and 'GET' commands:

        # Set key/value pairs
        127.0.0.1:6379> SET Bahamas Nassau
        OK

        127.0.0.1:6379> SET Croatia Zagreb
        OK


        # Get values by key
        127.0.0.1:6379> GET Croatia
        "Zagreb"

        127.0.0.1:6379> GET Japan
        (nil)


    - To set and get multiple pairs at a time, the 'MSET' and 'MGET' commands are used.

        # Set multiple pairs at once
        127.0.0.1:6379> MSET Lebanon Beirut Norway Oslo France Paris
        OK

        # Get multiple values at once
        127.0.0.1:6379> MGET Lebanon Norway Bahamas
        1) "Beirut"
        2) "Oslo"
        3) "Nassau"


    - We can use the 'EXISTS' command to check if a key exists:

        127.0.0.1:6379> EXISTS Norway
        (integer) 1

        127.0.0.1:6379> EXISTS Sweden
        (integer) 0


    - The Python redis client library we'll be using (redis-py) encapsulates an actual TCP 
        connection to a Redis server and sends raw commands as bytes serialized using the RESP
        (Redis Serialization Protocol).



- Redis Hash Type

    - A 'hash' is a mapping of 'string':'string' pairs that sits under one top-level key.

        127.0.0.1:6379> HSET realpython url "https://realpython.com/"
        (integer) 1

        127.0.0.1:6379> HSET realpython github realpython
        (integer) 1

        127.0.0.1:6379> HSET realpython fullname "Real Python"
        (integer) 1


    - We can use the 'HMSET' to set multiple pairs in a hash at once:

        127.0.0.1:6379> HMSET pypa url "https://www.pypa.io/" github pypa 
                          fullname "Python Packaging Authority"
        OK


    - The 'HGETALL' command returns all hash pairs.

        127.0.0.1:6379> HGETALL pypa
        1) "url"
        2) "https://www.pypa.io/"
        3) "github"
        4) "pypa"
        5) "fullname"
        6) "Python Packaging Authority"


    - Since we're going to be starting over in Python, we'll clear our toy database and quit the
        REPL.

        127.0.0.1:6379> FLUSHDB
        OK

        127.0.0.1:6379> QUIT



- Command Reference For Other Types

    Type      Commands
    ---------------------------------------------
    Sets      SADD, SCARD, SDIFF, SDIFFSTORE, SINTER, SINTERSTORE, SISMEMBER, SMEMBERS, SMOVE, SPOP,
                SRANDMEMBER, SREM, SSCAN, SUNION, SUNIONSTORE

    Hashes    HDEL, HEXISTS, HGET, HGETALL, HINCRBY, HINCRBYFLOAT, HKEYS, HLEN, HMGET, HMSET, HSCAN, 
                HSET, HSETNX, HSTRLEN, HVALS

    Lists     BLPOP, BRPOP, BRPOPLPUSH, LINDEX, LINSERT, LLEN, LPOP, LPUSH, LPUSHX, LRANGE, LREM, LSET, 
                LTRIM, RPOP, RPOPLPUSH, RPUSH, RPUSHX

    Strings   APPEND, BITCOUNT, BITFIELD, BITOP, BITPOS, DECR, DECRBY, GET, GETBIT, GETRANGE, GETSET, 
                INCR, INCRBY, INCRBYFLOAT, MGET, MSET, MSETNX, PSETEX, SET, SETBIT, SETEX, SETNX, 
                SETRANGE, STRLEN