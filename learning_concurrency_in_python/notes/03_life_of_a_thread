-----------------------------------------------------------------------
| CHAPTER 3 - LIFE OF A THREAD                                        |
-----------------------------------------------------------------------

- Threads in Python

    - Here is the definition of the 'Thread' class constructor:

        # Python Thread class constructor
        def __init__(self, group=None,
                           target=None,
                           name=None,
                           args=(),
                           kwargs=None,
                           verbose=None):


        group: This is a special parameter which is reserved for a future extension.

        target: This is the callable object to be invoked by the 'run()' method. If not passed, this will 
                  default to None, and nothing will be started.

        name: This is the thread name.

        args: This is the argument tuple for target invocation. It defaults to ().

        kwargs: This is a dictionary of keyword arguments to invoke the base class constructor.


    - Note that if we don't take care to think about whether multiple threads will truly solve our
        problem, we are just as likely to slow our performance down spinning up too many threads.



- Thread States

    1. New = Thread hasn't started yet, and hasn't been allocated resources.

    2. Runnable = Waiting for scheduler, has all resources it needs to proceed.

    3. Running = Thread is executing.

    4. Not Running = Thread has been paused in some way, possibly to wait for I/O.

    5. Dead = Killed intentionally or not.



- Example - Thread States

    - Here, we'll look at the various states our theads can be in:

        import threading
        import time

        # Simple method for thread to execute
        def thread_worker():
            print('My thread has entered the Running state.')
            time.sleep(10)
            print('My thread is terminating.')

        # Still no resources allocated after this
        my_thread = threading.Thread(target=thread_worker)

        # Allocate resource and make thread runnable
        my_thread.start()



- Ways to Start a Thread

    - We can run a thread with a single function if we have some simple logic.  This is shown
        in 'starting_threads.py' in the 'start_function_threads' function.


    - If we have more complex logic, we can inherit from the Thread class.  This is shown in the
        'start_class_threads' function.  


    - We can use 'forking' to create a replica of a process.  When created, this new clone receives
        it's own PID independent of the parent process.

      For example, Apache does this to spawn off new processes, each of which has it's own address 
        space and can process it's own requests.  This way if a process crashes or dies, other
        processes running concurrently will be unaffected.

      This approach is shown in the 'parent' and 'child' functions.


    - We may have a need to start 'daemon threads', which have no endpoint.  They will run forever
        until your program quits.

      For example, you have a load balancer, and your service registry needs to know if each instance
        is still up, so each instance sends a heartbeat message to the service registry.  We could
        migrate this task to a daemon thread.



- Starting Lots of Threads

    - We can create lots of threads in the same for loop:

        import random, time, threading

        def execute_thread(i):
            print("Thread {} started".format(i))
            sleepTime = random.randint(1,10)
            time.sleep(sleepTime)
            print("Thread {} finished executing".format(i))

        for i in range(10):
            thread = threading.Thread(target=execute_thread, args=(i,))
            thread.start()
            print("Active Threads:" , threading.enumerate())



- Getting the Total Number of Active Threads

    - Sometimes, we may want to query the number of active threads running in our Python program:

        for i in range(random.randint(2, 50)):
            thread = threading.Thread(target=execute_thread, args=(i,))
            thread.start()

        time.sleep(4)
        print("Total number of active threads: {}".format(threading.active_count()))



- Getting the Current Thread

    - For a quick and easy way to figure out what thread we are on, we can use the 'current_thread'
        function.

        def thread_target():
            print("Current Thread: {}".format(threading.current_thread()))

        threads = []
        for i in range(10):
            thread = threading.Thread(target=thread_target)
            thread.start()
            threads.append(thread)
        for thread in threads:
            thread.join()



- Main Thread

    - All Python programs feature at least one main thread.  We can retrieve it using 'main_thread'.

        def myChildThread():
            print("Child Thread Starting")
            time.sleep(5)
            print("Current Thread ----------")
            print(threading.current_thread())
            print("-------------------------")
            print("Main Thread -------------")
            print(threading.main_thread())
            print("-------------------------")
            print("Child Thread Ending")

        child = threading.Thread(target=myChildThread)
        child.start()
        child.join()



- Enumerating All Threads

    - We may sometimes need to do things like enumerate through all active threads in order to
        query their status.

        def my_thread(i):
            print("Thread {}: started".format(i))
            time.sleep(random.randint(1,5))
            print("Thread {}: finished".format(i))

        def enumerate_active_threads():
            for i in range(4):
                thread = threading.Thread(target=my_thread, args=(i,))
                thread.start()

            print("Enumerating: {}".format(threading.enumerate()))



- Identifying Threads

    - If you have large numbers of threads, it is often useful to put them into groups to ease
        debugging and monitoring.  We can give threads a unique name to make them easier to track.

        def my_named_thread():
            print("Thread {} starting".format(threading.currentThread().getName()))
            time.sleep(10)
            print("Thread {} ending".format(threading.currentThread().getName()))

        def use_named_threads():
            for i in range(4):
                threadName = "Thread-" + str(i)
                thread = threading.Thread(name=threadName, target=my_named_thread)
                thread.start()

            print("{}".format(threading.enumerate()))



- Ending a Thread

    - Ending threads is bad practice, and we should actively avoid it.  A thread could be holding on
        to a resource, or it might leave orphaned child threads.


    - If you do need to shut down threads at the end of execution, just killing the entire process
        allows for a much cleaner solution.

        def my_worker():
            t1 = time.time()
            print("Process started at: {}".format(t1))
            time.sleep(20)

        def start_and_end_process():
            myProcess = Process(target=my_worker)
            print("Process {}".format(myProcess))
            myProcess.start()
            print("Terminating Process...")
            myProcess.terminate()
            myProcess.join()
            print("Process Terminated: {}".format(myProcess))


    - Orphan processes have no alive parent process.  The take up resources and provide no benefit,
        and the only way to deal with them is to enumerate alive threads and kill them.



- How the OS Handles Threads

    - We'll create 2 versions of the same task, one completed by spinning up 10 processes, and one
        completed by spinning up 10 threads, and time them for comparison in 'fork_vs_create.py'.

      We can see that spinning up processors takes 10x longer for this simple task.


    - One solution to mitigate this problem is to create a pool of processes or threads at startup
        time and keep them around for when you need tasks done.



- Multithreading Models

    - One-to-One Thread Mapping

        - One user-level thread is mapped directly to one kernel-level thread.  Creating all those
            threads is expensive, but the threads are not subject to the same level of locking as
            with many-to-one mappings.


    - Many-to-One

        - Many user-level threads are mapped to a single kernel thread.  We can manage the user-level
            threads more efficiently this way.  However, if a uer-level thread is blocked, the entire
            kernel-level thread is also blocked.


    - Many-to-Many

        - Many user-level threads are mapped to many kernel-level threads.  The programmer themselves
            can choose whether they want a one-to-one or many-to-one model.


    - Within Python, we typically go with the one user thread to one kernel thread mapping, so every
        thread we create with our multithreaded applications will take non-trivial resources.

      The 'asyncio' module does let you implement multithreaded-like applications on a single thread.